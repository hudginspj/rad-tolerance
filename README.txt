This project requires mpicc, a makefile is provided.



To run the single-threaded task-graph demo:
$ ./task_graph_demo

This provides a simple demo of the core task-graph structure, in a single process.
task_graph_demo includes a short sleep during every cycle to make progress easier to follow 
The task graph is built in the function make_task_graph(). 

The first part of the demo fills 10 buffers with integers, 
then maps a function (x = x*3) to each buffer, then reduces the results with addition.
Task graphs are difficult to read and write, but they could be generated by preprocessing scripts.

The second part of the demo copies a string in a circle between buffers 1, 4, and 5, forever.
This demonstates the ability to specify a top-level control loop with a task graph, and demonstrates garbage collection.



To run the MPI-based experiment
$ mpiexec -np 3 distributed_task

The chief instructs two nodes to complete a task, then to send hashes of their outputs.
These hashes are compared, and if they do not match, the process is repeated until they do.
Currently, the bit_gremlin() function in tasks.c is set to produce errors only for the first attempt.

The process will complete successfully, but sometimes exits with a corrupted memory error.



md4.c contains a copied implementation of the MD4 hash from Rosetta Code, under the GNU Free Documentation Liscence, source provided in header.